Started: 25/08/2025
Course Link: https://github.com/jonasschmedtmann/complete-javascript-course
==============================================================================================================================
Sec - 1: Intro
==============================================================================================================================
Sec - 2: Js Fundamentals: Part-1
==============================================================================================================================
console.log(11 +11 )
alert('Hello world!')
let js = "Vivek"
if(js === "Vivek") alert(js)
js = "Vivek23"
if(js === "Vivek") alert(js)
==============================================================================================================================
- javascript is a high-level, Object oriented, multi-paradigm programming language.
- programming language means instruct computer to do things.
- high level programming language means
     - more easily understood and used by humans, providing a higher level of abstraction from the underlying computer hardware.
     - They abstract away low-level details of computer hardware, such as memory management, register allocation, and direct hardware interaction.
     - They use syntax and commands that are closer to natural human language 
     - High-level languages require a compiler or interpreter to translate the human-readable code into machine code
==============================================================================================================================
- HTML - is for content
  CSS - for presentation
  JS - for behavior/ interactivity
  ES6 - ECMAScript 6 released in 2015 (All the versions after this are called Modern javascript)

- variable name is written in camelCase in javascript
- variable name can't start with number
- variable name can contains number, letter, underscore and dollar sign
- variable name can't be reserved keyword
- variable name is case sensitive
     let js = 'Amazing'
     if (js === 'Amazing') alert(js);
     console.log('Vivek Nikate');

     let fname = 'Vivek';
     console.log('my name', fname)

     let v$s = 'asdfl'
     console.log(v$s)

// assignment - 1
     let country, continent, population;

     country = "India";
     continent = "Asia";
     population = 1380000000;
     console.log(country, continent, population);

     let isIsland = true;
     let language;

     console.log("The type of country is", typeof (country));
     console.log("The type of country is", typeof country);           // both syntax work no need of () in typeof
     console.log("The type of continent is", typeof (continent));
     console.log("The type of population is", typeof (population));
     console.log("The type of isIsland is", typeof (isIsland));
     console.log("The type of language is", typeof (language));
     console.log("null type ", typeof null);      // object


     language = "Marathi";
     console.log("The type of language is", typeof (language));

     // assignment - 2
     const country = "India", continent = "Asia";

     let population = 1380000000;
     console.log(country, continent, population);

     // country = 'sadf';        // invalid, its const
     // console.log(country);

- MultiLine log statement
     // using single quote
     console.log('Vivek Nikate\n\
                    Mahesh Nikate\
                    Im always here to help & all')
     
     // using back tick
     console.log(`Vivek Nikate
               mahesh Nikate
                         Nikate,            very very nice
               Family 
               Dipawali`)
==============================================================================================================================
const massMark = 78;
const heightMark = 1.69;
const massJohn = 92;
const heightJohn = 1.95;

const BMIMark = massMark / (heightMark * heightMark);
const BMIJohn = massJohn / (heightJohn * heightJohn);
console.log(BMIMark, BMIJohn);

if(BMIMark > BMIJohn)
    // console.log("Mark's BMI is higher than John's!");
    console.log(`Mark's BMI (${BMIMark}) is higher than John's!`);
else
    // console.log("John's BMI is higher than Mark's!");
    console.log(`John's BMI (${BMIJohn}) is higher than Mark's!`);
==============================================================================================================================
Type Conversion & coercion:
     Conversion: we manually convert it from one type to another
     coercion: javascript implicitly/ automatically converts one type to another.
     eg.
          const year = '1919'
          console.log(year);                // 1919
          console.log(typeof year);         // string

          // it won't work
          console.log(year + 10);           // 191910

          // to make it work
          console.log(Number(year) + 10);    //1929

          // NaN = Not a Number
          console.log(Number('Vivek')); // NaN .its not possible to convert it into Number

          // its type is still Number even if its not possible to convert into Number, but its invalid Number
          console.log(typeof Number('Vivek'));          // number
          
          // Convert to string
          let v = 556;
          console.log(v)

          let s = String(v)
          console.log(s, typeof s, v, typeof v);
          // we can convert string/number into number/ string or boolean, but can't convert them into undefined or null

          // type coercion
          console.log('I\'am '+ 25 +' years old')         // here 25 automatically converted into string
          //I'am 25 years old

          // + converts number into string, so
          console.log('10'+'20'+78);       // 102078

          // - converts string into number
          console.log('10'-'20'-78);       // -88

          console.log('10'-'20'+78);      // = 10 - 20 + 78 
                                        // = -10 + 78
                                        // = 68
          // till -1 its considered as string & concatenated after that converted to number
          // = 10+20-1+78
          // = 1020 - 1 + 78
          // = 1019 + 78
          // = 1097
          console.log('10'+'20'- '1' + 78);       // 1097

          console.log('2' * '100');           // 200
          console.log('2' ** '10');          // 1024
          console.log('22' / '11');          // 2

          // = 2 + 2 / 11
          // = 22 / 11
          // = 2
          console.log(('2' + '2') / '11');          // 2

          let n = '1' + 1
          n = n - 1;
          console.log(n);           // 10
          console.log(typeof n);           // 10

          n = 2 + 3 + 4 + '5'; 
          console.log(n);                  // 95
          console.log(typeof n);          // string
          // = 5 + 4 + '5'
          // = 9 + '5'
          // = 95

          n = '10' - '4' - '3' - 2 + '5'         // - operator convert string into number
          // = 6 - '3' - 2 + '5'
          // = 3 - 2 + '5'
          // = 1 + '5'
          // = '15'
          console.log(n);        // 15
          console.log(typeof n);   // string

          n = '100' - '5' + 100 + 200
          // = 95 + 100 + 200
          // = 195 + 200
          // = 395
          console.log(n);           // 395
          console.log(typeof n);    // number

          n = '100' - '200'
          console.log(n);              // -100
          console.log(typeof n);       // number

          n = n + 45
          console.log(n);           // -55
          console.log(typeof n);    // number
==============================================================================================================================
Truthy & Falsy:
     Falsy: Falsy values are not exactly false but will become false when we try to convert them into boolean
     - these values will get converted into boolean false.
          5 Falsy values: 0, '', undefined, null, NaN & false also.
     - any number which is not zero or any string which is not empty will gets converted into truthy values means true.
     - Converting to boolean is always implicit, means automatically gets converted into boolean also called type coercion.
     eg.
          console.log(Boolean(0))                    // false
          console.log(Boolean(undefined))            // false
          console.log(Boolean('Vivek'))              // true
          console.log(Boolean(''))                    // false

          // empty object
          console.log(Boolean({}))                    // true

          let s;       // here s is undefined
          console.log(s);
          if(s)
          console.log('true way');
          else
          console.log('false way');
          
          (s) ? console.log('true way') : console.log('false way');

          let money = 0;
          money ? console.log('Don\'t spend..') : console.log('You should get a JOB.!');

          money++;
          money ? console.log('Don\'t spend..') : console.log('You should get a JOB.!');
==============================================================================================================================
Equality operator (== & ===):
     const age = 78;
     console.log((age === 78) ? 'yes':'no');

     // loose equality operator
     // does type coercion
     console.log(18 == '18');   // true
     console.log(18 == 18);   // true


     // strict equality operator, does not do type coercion
     // always use strict equality operator (===).
     console.log(18 === '18');   // false  
     console.log(18 === 19)    // false

     const fav = Number(prompt('What\'s your favorite numb:'))
     console.log(fav, 'its type is: ', typeof fav);

     if(fav === 50)
     console.log('its 50');
     else if(fav === 1)
     console.log('its 1');
     else if(fav === 9)
     console.log('its 9');
     else
     console.log('its not 50 or 1 or 9');

     // strict not equality
     if(fav !== 50)
     console.log('its not 50')
     if(fav != 1)   // loose not equal
     console.log('its not 1')

     console.log(null == undefined)    // true
     console.log(null === undefined)   // false

     console.log(null == 0)      // false
     console.log(undefined == 0) // false

==============================================================================================================================
Boolean Logic:
     a  = 1;
     b = 0;
     console.log(a,b)                   // 1 0
     console.log("!a ",!a," !b ",!b)         // !a false !b true
     console.log((a && b) ? 'yes': 'no');    // no
     console.log((a || b) ? 'yes': 'no');    // yes
     console.log((a ^ b) ? 'yes': 'no');     // yes
     console.log((!a) ? 'yes': 'no');        // no
     console.log((!b) ? 'yes': 'no');        // yes
==============================================================================================================================
Logical operator:
     const goodVision = false
     const DriverLic = true

     const shouldDrive = goodVision && DriverLic;

     if(shouldDrive)
     console.log("yes");
     else
     console.log("no");
==============================================================================================================================
Test:
     const scoreDolphins = (96+108+89)/3;
     const scoreKoalas = (88+91+110)/3;

     if(scoreDolphins > scoreKoalas)
     console.log("Dolphins win the trophy");
     else if(scoreDolphins < scoreKoalas)
     console.log("Koalas win the trophy");
     else
     console.log("Both win the trophy");
==============================================================================================================================
Switch:
     const day = 'sunday';
     switch(day){
          case 'monday':                // strict equality check day === 'monday
               console.log('Its monday1');
               console.log('Its monday2');
               console.log('Its monday3');
               console.log('Its monday4');
               break;
          case 'tuesday':
               console.log('Its tuesday1');
               console.log('Its tuesday2');
               break;
          case 'wednesday':
               console.log('Its wednesday');
               break;
          case 'thursday':
          case 'friday':
               console.log('Its weekend coming');
               break;
          case 'saturday':
          case 'sunday':
               console.log('Its Holiday');
               break;
          default:
               console.log("its out of Context")
     }

     // or
          if(day === 'monday'){
               console.log('Its monday1');
               console.log('Its monday2');
               console.log('Its monday3');
               console.log('Its monday4');
          } else if(day === 'tuesday'){
               console.log('Its tuesday1');
               console.log('Its tuesday2');
          } else if(day === 'wednesday'){
               console.log('Its wednesday');
          } else if(day === 'thursday' || day === 'friday'){
               console.log('Its weekend coming');
          } else if(day === 'saturday' || day === 'sunday'){
               console.log('Its Holiday');
          } else {
               console.log("its out of Context")
          }
==============================================================================================================================
statement & expression:
     statement: is a complete line of code.
     eg.
          if(){}
          switch(){}

     expression: is a piece of code that returns a value.
     eg. 
          100
          'im vivek nikate'
          2 + 3
          true || false
          1 < 2
          let a = 2 + 3;
          let b = true || false;
==============================================================================================================================
Conditional (ternary) operator:
     const age = 25;
     console.log(age >= 18 ? "Good Adult" : "Chlid");

     const drink = age >= 18 ? "Good Adult1" : "Chlid1";
     console.log(drink);
     console.log(`Ouput is: ${age >= 18 ? "Good Adult1" : "Chlid1"}`);
     // or
     const bill = 275;
     let tip = (bill >= 50 && bill <= 300) ? bill * (15/100) : bill * 0.2;
     console.log(`The bill was ${bill}, the tip was ${tip}, and the total value ${bill+tip}`)
==============================================================================================================================
Sec-3: Js Fundamentals Part - 2
==============================================================================================================================
'use strict':  
     'use strict'
     let hasDriversLicense = false;
     const passTest = true

     if (passTest) hasDriverLicense = true                   -- mistake in hasDriverLicense spelling use strict will catch this
     if (hasDriversLicense) console.log("I can drive");

     // const interface = 'Vivek';              // strict mode will not allow us to create variable with reserved keyword
     // const private = 'my private variable';
     // const if = 45;
==============================================================================================================================
function:
     function logger() {
          console.log('My name is Vivek');
     }

     logger();
     logger();
     logger();
     function makeJuice(fruit1, fruit2) {
          return `Making Juice from ${fruit1} fruit1 and ${fruit2} fruit2. Enjoy.!`;
     }

     const Juice1 = makeJuice(10, 20);
     const Juice2 = makeJuice(100, 120);
     const Juice3 = makeJuice(1000, 110);
     console.log(Juice1, Juice2, Juice3);

     // arrow:
          // Hoisting:
          // Hoisting in JavaScript is a behavior where declarations of variables, functions, and classes are conceptually "moved" to the top of their containing scope during the compilation phase, before the code is executed.This allows these elements to be used before their actual declaration appears in the code. 

          'use strict'
          // normal function
          // this works in normal function
          const birthYear = 2000
          console.log(`Before declaration: I'm born in ${birthYear}, & my current age is ${calcAge1(birthYear)}`);
          function calcAge1(birthYear) {
               return 2025 - birthYear;
          }
          console.log(`After: I'm born in ${birthYear}, & my current age is ${calcAge1(birthYear)}`);

          // function expression
          // this won't work in function expression, calling before declaration
          // console.log(`Before: I'm born in ${birthYear}, & my current age is ${calcAge3(birthYear)}`);
          // this is anonymous function
          const calcAge3 = function (birthYear) {
               return 2040 - birthYear;
          }
          console.log(`After: I'm born in ${birthYear}, & my current age is ${calcAge3(birthYear)}`);


          // arrow function
          // this won't work in arrow function, calling before declaration
          // console.log(`Before: I'm born in ${birthYear}, & my current age is ${calcAge2(birthYear)}`);
          const calcAge2 = birthYear => 2030 - birthYear;
          console.log(`After: I'm born in ${birthYear}, & my current age is ${calcAge2(birthYear)}`);

          // not allowed access before initialization
          // console.log(calcAge4('sdfwe', 25));       // not allowed when its declared with const or let
          const calcAge4 = (name, birthYear) => {
               return `My name is ${name}, & my age is ${2025 - birthYear}`;
          }

          console.log(calcAge4('Vivek', 2000))         // My name is Vivek, & my age is 25
          console.log(calcAge4('Mahesh', 1975))        // My name is Mahesh, & my age is 50


          // if its var & just calling the name then it gives undefined as result
          console.log(calling);              // UNDEFINED
          var calling = 'Vivek';
          console.log(calling);              // Vivek

          // or in-case of function
          console.log(calling2);                  // UNDEFINED
          // console.log(calling2('werwe', 89));                  // this will throw error we can't call function before initialization
          var calling2 = (name, birthYear) => {
               return `FROM VAR CALLING:My name is ${name}, & my age is ${2025 - birthYear}`;
          }
          console.log(calling2('Vivek', 2000));                                                // FROM VAR CALLING:My name is Vivek, & my age is 25

     - function calling another function:
     eg.1.
          const cutIntoPieces = fruit => fruit * 4;
          

          function JuiceMaker(fruit1, fruit2) {
          const pieces1 = cutIntoPieces(fruit1);
          const pieces2 = cutIntoPieces(fruit2);
          return `Making a Juice with ${pieces1} pieces of Apples and ${pieces2} pieces of Orange`;
          }

          console.log(JuiceMaker(5, 10));    // Making a Juice with 20 pieces of Apples and 40 pieces of Orange
     Test:
          const calcAverage = (a, b, c) => (a+b+c)/3;
          const scoreDolphins = calcAverage(44, 23, 71);
          const scoreKoalas = calcAverage(65, 54, 49);
          const checkWinner = (avgDolphins, avgKoalas) => {
               if(avgDolphins >= avgKoalas * 2) console.log("D");
               else if(avgDolphins * 2 <= avgKoalas) console.log("K");
               else console.log("No team wins...");
          }
          checkWinner(scoreDolphins, scoreKoalas);

Array:
     const frnd1 = 'v1';
     const frnd2 = 'v2';
     const frnd3 = 'v3';
     const frnds = ['v1', 'v2', 'v3'];
     console.log(frnds);
     const years = new Array(1991, 1987, 2000, 2004, 2012, 2025);
     console.log(years);

     console.log(frnds[0]);
     console.log(frnds[2]);
     console.log(years[1]);
     console.log(years[2]);

     console.log("no.of frnds ",frnds.length);
     console.log("year count ", years.length);

     // accessing last element
     console.log(years[years.length - 1]);

     // it worked, but it shouldn't coz frnds array we declared as const.
     frnds[2] = 'new friend';

     // then how its changed
     // REASON IS: only primitive types are immutable means can't be changed (string, number, boolean, undefined, null, symbol, BigInt)
     // array is not primitive datatype in javascript, so it changed its value
     console.log(frnds);

     // changing whole array is not allowed
     // frnds = ['asdf', 'wer'];  

     const myName = "Vivek"
     const vivek = ['vi', 'nikate', 2025 - 2000, myName, frnds, true, false, undefined, null, NaN];
     console.log(vivek);

     const birthYears = [2000, 2001, 2002, 2003, 2004, 2005, 2006];
     // just added 10 at the end of birthYears array
     console.log(birthYears + 10); //  2000,2001,2002,2003,2004,2005,200610

     console.log(birthYears - 10); // NaN

     const calcAge = birthYear => 2025 - birthYear;
     console.log(`My birthYear is ${birthYears[0]} & Age:`, calcAge(birthYears[0]));
     console.log(`My birthYear is ${birthYears[1]} & Age:`, calcAge(birthYears[1]));
     console.log(`My birthYear is ${birthYears[3]} & Age:`, calcAge(birthYears[3]));    

Array methods:
     // inserting at the end
     const arr = [1, 2, 3, 'rwer'];
     console.log(arr);
     arr.push(24);
     console.log(arr);
     const len = arr.push(arr);
     console.log('len is ', len, arr);

     // inserting at the beginning, these methods returns the length new array formed
     const len1 = arr.unshift('Vivek');
     console.log('len is: ', len1, arr);

     // removing elements, it returns the removed element
     // from end
     const popped1 = arr.pop();
     const popped2 = arr.pop();
     console.log('popped 1: ', popped1, 'popped2: ', popped2);
     console.log(arr);

     // from beginning
     const popped3 = arr.shift();
     const popped4 = arr.shift();
     console.log('from beginning ', popped3);
     console.log('from beginning ', popped4);
     console.log(arr);

     console.log('is exist at: ', arr.indexOf(2));
     console.log('-1 if not exist: ', arr.indexOf(200));
     console.log('is exist at: ', arr.indexOf('rwer'));
     console.log('is exist at: ', arr.indexOf('rWer')); // case-sensitive

     // includes, uses strict equality check
     console.log('2', arr.includes(2)); // true
     console.log("'2'", arr.includes('2')); // true
     console.log('200', arr.includes(200)); // false
     console.log('rwer', arr.includes('rwer')); // true
     console.log('rWer', arr.includes('rWer')); // false case sensitive
     console.log('rwe', arr.includes('rwe')); // false
Test:
     const calcTip = billValue => (billValue >= 50 && billValue <= 300) ? billValue * 0.15 : billValue * 0.2;
     const bills = [125, 555, 44];
     const tips = [calcTip(bills[0]), calcTip(bills[1]), calcTip(bills[2])]
     const totals = [bills[0]+tips[0], bills[1]+tips[1], bills[2]+tips[2]];

Intro to Object:
     const v = ['Vivek', 'Nikate', ['A', 'B', 'C'], 25];
     const Person = {
          firstName: 'Vivek',
          lastName: 'Nikate',
          friends: ['A', 'B', 'C'],
          age: 25,
     };

     console.log(v);
     console.log(Person);

     console.log(Person.lastName);
     console.log(Person['lastName']);
     const nameKey = 'Name';
     console.log(Person['first' + nameKey]);
     console.log(Person['last' + nameKey]);

     // not work
     // console.log(Person.'last' + nameKey);

     // undefined
     console.log(Person.crush);
     console.log(Person['crush']);
     const interested = prompt('what you want to know, type firstName, lastName, age, friends.');
     console.log(Person.interested);           // not works
     console.log(Person[interested]);
     Person[interested] ? console.log(Person[interested]) : console.log("wrong, type firstName, lastName, age or friends");

     // adding properties to object
     Person.job = 'Software Engineer';
     Person['hobby'] = ['Coding', 'Playing Games', 'Listening songs'];

     console.log(Person);
     console.log(`${Person.firstName} has ${Person.friends.length} friends and ${Person.friends[0]} is his BEST friend.`)

Object methods:
     - Any function is attached to object is called method.
     eg. in below object juice, calcAge & process are identified as methods of object Person
     const Person = {
          firstName: 'Vivek',
          lastName: 'Nikate',
          profession: 'Software Engineer',
          hasDriversLicense: true,
          friends: ['A', 'B', 'C'],
          age: 25,
          birthYear: 2000,
          calcAge: (currentYear) => currentYear - 2000,
          // reading birth year internally, arrow function doesn't support this keyword
          // calcAge4: () => new Date().getFullYear() - this.birthYear,

          // this voilets the DRY principle as we are using object name directly in below line, what if we change the object name later
          // in that case we have to come here & change the object name, so its better to use this keyword
          calcAge3: () => new Date().getFullYear() - Person.birthYear,
          calcAge2: function() {
               return new Date().getFullYear() - this.birthYear;
          },
          juice: function(){
                    console.log(this);         // this will print the cur object
                    return 'making juice';
               },
          process: (p1, p2, p3) => {
               return `working on ${p1} first, then ${p2} & then ${p3}`;
          },
          // this will save re-computations & time
          calcNewAge: function () {
               this.myNewAge = 2030 - 2000;
               return this.myNewAge;
          },
          // calling calcNewAge function instead of using myNewAge directly
          // there might be a case where getSummary function got called before creating myNewAge property of object.
          // so better to call function instead of using undefined property.
          getSummary: function(){
               return `${this.firstName} is a ${this.calcNewAge()}-year old ${this.profession}, and he has ${this.hasDriversLicense ? 'a' : 'not'} driver license`;
          },
     };

     console.log(Person.firstName);
     console.log(Person.calcAge(2025));
     console.log("using bracket ", Person['calcAge'](2025));

     console.log(Person.calcAge2());
     console.log("using bracket calcAge2 this: ", Person['calcAge2']());


     console.log(Person.calcAge3());
     console.log("using bracket calcAge3 this: ", Person['calcAge3']());

     console.log(Person.juice());
     console.log("using bracket ", Person['juice']());

     console.log(Person.process(1,2,3));
     console.log("using bracket ", Person['process'](1,2,3));

     console.log(Person.calcNewAge());
     console.log("using bracket new Age: ", Person['calcNewAge']());

     // now directly accessing new age, withou    t computing again
     console.log(Person.myNewAge);
     console.log(Person.myNewAge);
     console.log(Person.myNewAge);
     console.log(Person.myNewAge);

     console.log(`${Person.firstName} is a ${Person.myNewAge}-year old ${Person.profession}, and he has ${Person.hasDriversLicense ? 'a' : 'not'} driver license`)

     console.log("from object Using bracket ",Person['getSummary']());
     console.log(Person.getSummary());

     TEST:
          const mark = {
               fullName: 'Mark Miller',
               mass: 78,
               height: 1.69,
               calcBMI: function () {
                    this.bmi = this.mass / (this.height * this.height);
                    return this.bmi;
               },
          }

          const john = {
               fullName: 'Mark Miller',
               mass: 92,
               height: 1.95,
               calcBMI: function () {
                    this.bmi = this.mass / (this.height * this.height);
                    return this.bmi;
               },
          }
          const v1 = john.calcBMI(), v2 = mark.calcBMI();
          const johnGreater = v1 > v2;
          // console.log(`${johnGreater ? 'John Smith' : 'Mark Miller'}'s BMI (${johnGreater ? v1 : v2}) is higher than ${johnGreater ? 'Mark Miller' : 'John Smith'}'s (${johnGreater ? v2 : v1})!`);
          if(!johnGreater)
          console.log(`${mark.fullName}'s BMI (${mark.bmi}) is higher than ${john.fullName}'s (${john.bmi})!`)
          else if(johnGreater)
          console.log(`${john.fullName}'s BMI (${john.bmi}) is higher than ${mark.fullName}'s (${mark.bmi})!`)
     
Loops:
     for(let i=0; i<10; i++)
          console.log("rep ", i);
     
     array:
     for(let i=0; i<vivek.length; i++)
          console.log(vivek[i]);

     // what if not assigned:
          const a = [];
          for(let i=0; i<20; i+=2)
               a[i] = i;

          console.log(a.length);        // 19
          for(let i=0; i<30; i++)       // value which is exist shows else says undefined
               console.log(a[i]);
          
     // size:
          const a = [];
          a[0] = 78;
          a[100] = 78;

          console.log(a.length);        // size is index of last element + 1
          for(let i=0; i<a.length; i++)       // value which is exist shows else says undefined
               console.log(a[i]);

Continue & break:
     const a = [];
     for(let i=0; i<10; i++)
          a.push(i);
     
     for(let i=0; i<10; i++){
          if(i % 4 !== 0) continue;                      // if divisible by 4
          console.log(a[i]);
     }

     console.log('----------------')
     for(let i=1; i<10; i++){
          console.log(a[i]);
          if(i % 4 === 0) break;                      // found first Number divisible by 4
     }

Traverser array in reverse:
     for(let i=a.length-1; i>=0; i--)
          console.log(a[i]);

Nested Loops:
     for(let i=a.length-1; i>=0; i--){
          // print each num 3 times
          for(let j=0; j<3; j++)
               console.log(a[i]);
          console.log('-----');
     }

- While loop: use while loop instead of for loop when we don't know the ending condition or the number of iterations or we need to keep
  looping until a certain condition is met
     let dice = Math.ceil(Math.random() * 10);
     while(dice !== 10){
          dice = Math.ceil(Math.random() * 10);  
          console.log(dice);
     }

     let i=0;
     while(i < 10)
          console.log(a[i++]);

TEST:
     const calcTip = function (bill) {
          return bill >= 50 && bill <= 300 ? bill * 0.15 : bill * 0.2;
     }

     const bills = [22, 295, 176, 440, 37, 105, 10, 1100, 86, 52];
     const tips=[], totals = [];

     for(let i=0; i<bills.length; i++){
          tips.push(calcTip(bills[i]));
          totals.push(bills[i] + tips[i]);
     }

     const calcAverage = function(arr){
          let s=0;
          for(let i=0; i<arr.length; i++)
               s += arr[i];
          return s/arr.length;
     }

     console.log(calcAverage(totals));
==============================================================================================================================
Sec-4: Navigate Course:
==============================================================================================================================
Sec-5: Dev Skills & Editor setup:
==============================================================================================================================
Sec-6: HTML & CSS crash course:
==============================================================================================================================
Sec-7: DOM & Events:
     num guess:
          'use strict';
          let secret = Math.ceil(Math.random() * 20);
          console.log(secret);
          let score = 20, highScore = 0;

          document.querySelector('.score').textContent = score;
          document.querySelector('.check').addEventListener('click', () => {
               const guess = Number(document.querySelector('.guess').value);
               if (!guess) {
                    document.querySelector('.message').textContent = '⛔ No Number';
               } else if (guess === secret) {
                    document.querySelector('.message').textContent = '🎉 Correct Number!';
                    document.querySelector('body').style.backgroundColor = '#6ac050ff';
                    document.querySelector('.number').textContent = secret;
                    if (highScore < score) {
                         highScore = score
                         document.querySelector('.highscore').textContent = score;
                    }
               } else {
                    score--;
                    document.querySelector('.score').textContent = score;
                    if (score <= 0) {
                         document.querySelector('.message').textContent = '💥 You lost the game, Please re-start the game';
                         document.querySelector('.check').disabled = true;
                    } else {
                         if (guess < secret) {
                              document.querySelector('.message').textContent = '📉 Too Low';
                         } else {
                              document.querySelector('.message').textContent = '📈 Too High';
                         }
                    }
               }
          })

          document.querySelector('.again').addEventListener('click', () => {
               score = 20;
               secret = Math.ceil(Math.random() * 20);
               // console.log('serect ', secret);
               document.querySelector('.message').textContent = 'Start guessing...';
               document.querySelector('.number').textContent = '?'
               document.querySelector('.score').textContent = score;
               document.querySelector('.guess').value = '';
               document.querySelector('body').style.backgroundColor = '#222';
               document.querySelector('.check').disabled = false;
          })

          // document.querySelector('.my-btn').addEventListener('keyup', () => {
          //      alert('you Clicked key released the button');
          // });

          // document.querySelector('.my-btn').addEventListener('dblclick', () => {
          //      alert('you Dbouble clicked the button');
          // });

          // document.querySelector('.my-btn').addEventListener('keydown', (e) => {
          //      console.log(e.key);
          //      if (e.key === 'a')
          //           alert('you pressed a key button');
          // });

     modal:
          'use strict';

          const btnsOpenModal = document.querySelectorAll('.show-modal');
          const overLay = document.querySelector('.overlay');
          const model = document.querySelector('.modal');

          const openModel = () => {
               model.classList.remove('hidden');
               overLay.classList.remove('hidden');
          }
          const closeModal = () => {
               model.classList.add('hidden');
               overLay.classList.add('hidden');
          }

          for (let i = 0; i < btnsOpenModal.length; i++)
               btnsOpenModal[i].addEventListener('click', openModel)

          document.querySelector('.close-modal').addEventListener('click', closeModal)
          overLay.addEventListener('click', closeModal)

     pig game:
          'use strict';
          const player1Score = document.querySelector('#score--0');
          const player2Score = document.getElementById('score--1');             // getElementById is little bit faster than querySelector
          const dice = document.querySelector('.dice');

          let currentScore0 = document.querySelector('#current--0');
          let currentScore1 = document.querySelector('#current--1');

          dice.classList.add('hidden');
          const roller = document.querySelector('.btn--roll');

          document.querySelector('.player--0').classList.add('player--active');
          // if 1 then player 1 else player 2
          let activePlayer = 1;

          let player1ActualScore = 0;
          let player2ActualScore = 0;

          let player1CurrentScore = 0;
          let player2CurrentScore = 0;

          player1Score.textContent = player1ActualScore;
          player2Score.textContent = player2ActualScore;

          roller.addEventListener('click', () => {
               const diceRoll = Math.ceil(Math.random() * 6);
               dice.src = `dice-${diceRoll}.png`;
               if (diceRoll === 1) {
                    activePlayer = !activePlayer;
                    alterActivePlayer(activePlayer);
                    player1CurrentScore = player2CurrentScore = 0;
                    currentScore0.textContent = currentScore1.textContent = 0;
               } else {
                    if (activePlayer) {
                         player1CurrentScore += diceRoll;
                         currentScore0.textContent = player1CurrentScore;
                    } else {
                         player2CurrentScore += diceRoll;
                         currentScore1.textContent = player2CurrentScore;
                    }
               }
               dice.classList.remove('hidden');
          })

          document.querySelector('.btn--new').addEventListener('click', () => {
               player2CurrentScore = player1CurrentScore = player2ActualScore = player1ActualScore = 0;
               player1Score.textContent = player2Score.textContent = currentScore0.textContent = currentScore1.textContent = 0;
               document.querySelector('.player--0').classList.remove('player--winner');
               document.querySelector('.player--1').classList.remove('player--winner');
               activePlayer = 1;
               roller.style.display = 'block';
               alterActivePlayer(activePlayer)
               document.querySelector('.btn--hold').style.display = 'block'
          })

          function alterActivePlayer(activePlayer) {
               if (activePlayer) {
                    document.querySelector('.player--0').classList.add('player--active');
                    document.querySelector('.player--1').classList.remove('player--active');
                    // document.querySelector('.player--0').classList.toggle('player--active');
                    // document.querySelector('.player--1').classList.toggle('player--active');
               } else {
                    document.querySelector('.player--1').classList.add('player--active');
                    document.querySelector('.player--0').classList.remove('player--active');
               }
          }

          // setting winner's styles & corresponding settings
          function setWinner(player) {
               document.querySelector(`.player--${player}`).classList.add('player--winner');
               roller.style.display = 'none';
               const currentScore = document.querySelector(`#current--${player}`);
               currentScore.textContent = "WON"
               dice.style.display = 'none';
               document.querySelector('.player--0').classList.remove('player--active');
               document.querySelector('.player--1').classList.remove('player--active');
               document.querySelector('.btn--hold').style.display = 'none';
          }

          document.querySelector('.btn--hold').addEventListener('click', () => {
               activePlayer = !activePlayer;
               alterActivePlayer(activePlayer);
               player1ActualScore += player1CurrentScore;
               player2ActualScore += player2CurrentScore;

               player1Score.textContent = player1ActualScore;
               player2Score.textContent = player2ActualScore;
               player1CurrentScore = player2CurrentScore = 0;
               currentScore0.textContent = currentScore1.textContent = 0;
               if (player1ActualScore >= 100) {
                    setWinner(0)
                    return;
               }
               if (player2ActualScore >= 100) {
                    setWinner(1);
                    return;
               }
          })
==============================================================================================================================
Sec-8: How JS works behind the scenes:
     - let, const are blocked scoped, but var is function scoped.
     - the function are also the block scope, means accessible only within the block where its delcared, but only when we are using 'use strict' mode
     - if we don't use 'use strict' then function can accessible outside the block.
     - Hoisting:
          // declaration can be accessible
          console.log(add(10,20));

          // expression are not accessible before initialization
          // console.log(addExp(20,30));

          // function declaration
          function add(a,b){
          return a+b;
          }

          // function expression
          const addExp = function (a,b) {
          return a+b;
          }

          // allowed here
          console.log(addExp(20,30));

          // console.log(addArrow(1,1));

          // arrow function
          const addArrow = (a,b) => a+b;
          console.log(addArrow(1,1));
     
     - variable declared with var will create a property on global window object
     eg.
          var x = 10;
          const y = 20;
          let z = 70;
          console.log(x === window.x);       // true
          console.log(y === window.y);       // false
          console.log(z === window.z);       // false

     - This keyword points to the owner of the function.
     - eg.
          'use strict'
          console.log(this);           // window object

          const calc1 = function(year) {
               console.log(year);
               console.log("expression: ", this);           // undefined inside function expression, but if you dont use 'use strict' then this also will be window object.
          }

          const calc2 = year => {
               console.log(year);
               console.log("arrow function ", this);           // window object inside arrow function. arrow function doesnt have its own this keyword
          }

          calc1(2000)
          calc2(2001)
     
     - you should never ever use arrow function as method.
     - inside object if you want to create a function the always use anonymous/ function expression syntax. don't use arrow
          eg.
               myfn: function(){
                    // statements
               }

               'use strict'
               const Vivek = {
                    year: 2000,
                    calcAge: function (){
                         console.log(this);
                         console.log(this.year);
                         
                         // Solution-1: save data of this keyword
                         const self = this;
                         const f1 = function(){
                              console.log('insdie f1: ', this);         // this is undefined, as its normal function body can be outside of Object, so this keyword doesn't exist
                              console.log('insdie f1 self saving this data: ', self, self.year);
                         }
                         f1();

                         // Solution-2: use arrow function, when need of nested functions. as arrow function don't get its own this keyword, it uses its parents this.
                         const f2 = () => {
                              console.log("f2: ",this);
                              console.log("f2 year: ",this.year);
                         }
                         f2();
                    }
               }

               Vivek.calcAge();

               const mahesh = {
                    year:1971
               };

               // method borrowing
               mahesh.calcAge = Vivek.calcAge;
               console.log(mahesh);
               mahesh.calcAge();          // mahesh Object

               const myFunc = Vivek.calcAge;
               console.log(myFunc);
               // myFunc();                // always use 'use strict' mode else the result will be different

     - arguments keyword:
          - arguments keyword only available in regular functions.
          // regular function has access to arguments keyword
          const add = function(a, b) {
               console.log(arguments);
               return a+b;
          }

          console.log(add(4,5));
          add(7,8,9,4,5,6);

          // arrow function doesn't have access to arguments keyword
          const add2 = (a,b) => {
               // console.log(arguments);          // not exist
               return a+b;
          }
          add2(2,3);

     - Shallow & Deep copy:
          'use strict'
          const jess = {
          firstNmae: 'jess',
          lastName: 'Will',
          age: 20
          };

          const marriedJess = jess;
          marriedJess.lastName = 'David'
          console.log("Before: ", jess);
          // {
          //     "firstNmae": "jess",
          //     "lastName": "David",
          //     "age": 20
          // }
          console.log("After: ", marriedJess);
          // {
          //     "firstNmae": "jess",
          //     "lastName": "David",
          //     "age": 20
          // }

          // in function when we pass the object, we are not passing their copy or value, we are passing the reference of that object

          // copy of original object
          const Vivek = {
          firstNmae: 'Vivek',
          lastName: 'Nikate',
          age: 25,
          friends: ['a','b','c'],
          family: ['x','y','z','p','q','r','s','t']
          };

          // spread-operator, copy of Vivek
          // this is shallow copy, only first level copy, only create a copy of current object not for nested object
          const cloneViv = {...Vivek};
          console.log("Vivek ", Vivek);
          console.log("cloned ", cloneViv);
          console.log("Vivek friends ", Vivek.friends);

          console.log("cloned friends Before", cloneViv.friends);
          // cloneViv.friends = [1,2,3,4,5,6];
          cloneViv.friends.push('Virus');
          // both are same
          console.log("cloned friends After", cloneViv.friends);
          console.log("Vivek ", Vivek.friends);

          // deep copy or deep clone
          const deepClone = structuredClone(Vivek);
          deepClone.friends.push(7,8,9,6,45);
          console.log(Vivek);
          console.log(deepClone);
==============================================================================================================================
Section 9: Data Structures, Modern Operators and Strings:
     - Destructuring arrays:
          - to destructure array we use [] syntax
          const arr = [2,3,4];
          const a = arr[0];
          const b = arr[1];
          const c = arr[2];

          console.log(a,b,c);
          // destructuring
          const [z,x,y] = arr;
          console.log(z,x,y);


          // Data needed for first part of the section
          const restaurant = {
               name: 'Classico Italiano',
               location: 'Via Angelo Tavanti 23, Firenze, Italy',
               categories: ['Italian', 'Pizzeria', 'Vegetarian', 'Organic'],
               starterMenu: ['Focaccia', 'Bruschetta', 'Garlic Bread', 'Caprese Salad'],
               mainMenu: ['Pizza', 'Pasta', 'Risotto'],

               order: function(startIndx, mainIndx){
                    return [this.starterMenu[startIndx], this.mainMenu[mainIndx]];
               },
               
               openingHours: {
                    thu: {
                         open: 12,
                         close: 22,
                    },
                    fri: {
                         open: 11,
                         close: 23,
                    },
                    sat: {
                         open: 0, // Open 24 hours
                         close: 24,
                    },
               },
          };

          // first 2 elements of array
          const [first, second] = restaurant.categories;
          console.log(first, second);          // Italian Pizzeria

          // first and 3rd element, if crossing the range then it will be undefined
          const [first1 ,, third ,, unexpected] = restaurant.categories;
          console.log(first1, third, unexpected);     // Italian Vegetarian undefined

          let [start, main] = restaurant.order(0,1);
          console.log(start, main);

          // swapping
          let p = 20, q = 30;
          console.log(p,q);
          [p,q] = [q,p];
          console.log(p,q);

          // or
          const temp = p;
          p = q;
          q = temp;
          console.log(p,q);

          const nested = [2,3,4, [5,6,7]];
          const [i,,,j] = nested;
          console.log(i, j);

          // nested destructuring
          const [i1,,,[j1,,k1]] = nested;
          console.log(i1, j1, k1);

          // default value
          const [i2=1, j2=90, k2=78] = [10, 11];
          console.log(i2, j2, k2);
     
     - Destructuring Objects:
          we use {} syntax
          // Data needed for first part of the section
          const restaurant = {
               name: 'Classico Italiano',
               location: 'Via Angelo Tavanti 23, Firenze, Italy',
               categories: ['Italian', 'Pizzeria', 'Vegetarian', 'Organic'],
               starterMenu: ['Focaccia', 'Bruschetta', 'Garlic Bread', 'Caprese Salad'],
               mainMenu: ['Pizza', 'Pasta', 'Risotto'],

               openingHours: {
                    thu: {
                         open: 12,
                         close: 22,
                    },
                    fri: {
                         open: 11,
                         close: 23,
                    },
                    sat: {
                         open: 0, // Open 24 hours
                         close: 24,
                    },
               },
          };

          // object destructuring, order/sequence doesn't matter
          const { name, openingHours, categories } = restaurant;
          console.log(name, openingHours, categories);

          // renaming properties
          const { name: restoName, openingHours: Hours, location: Branches } = restaurant;
          console.log(restoName, Hours, Branches);

          // default values for properties & renaming
          const { menu = [], menu2, starterMenu: InitialMenu = [] } = restaurant;
          console.log('menu: ', menu, 'menu2: ', menu2, InitialMenu);

          let a = 400,
          b = 500;
          const obj = { a: 1, b: 2, c: 3 };
          console.log(a, b);
          // destructuring already existed values
          // let {a:z, b:x} = obj;     // this works
          // console.log(z,x);
          // or
          ({ a, b } = obj);
          console.log(a, b);
          
          // nested objects
          const {sat} = openingHours;
          console.log(sat);

          const {sat: {open, close}} = openingHours
          console.log(open, close);

          // renaming
          const {sat: {open: o, close: c}} = openingHours
          console.log(o, c);

          // all good values
          restaurant.orderDelivery({
               time:'22:30',
               address: 'India, Maharashtra, Solapur',
               mainIndex:2,
               startIndex:2,
          })

          // indexes are out of range
          restaurant.orderDelivery({
               time:'22:30',
               address: 'India, Maharashtra, Solapur',
               mainIndex:12,
               startIndex:21,
          })

          // invalid parameter passing
          restaurant.orderDelivery({});

     - spread Operator:
          const arr = [10, 2, 30];
          const badArr = [1,23, arr[0], arr[1], arr[2]];
          console.log(badArr);

          // single array, spread operator
          const newGoodArr = [1, 23, ...arr];

          // nested array
          const Arr2 = [1, 23, arr];

          console.log(newGoodArr);
          console.log(...newGoodArr);
          console.log(1,23,10,2, 30);         // is same as ...newGoodArr content
          console.log(Arr2);

          // Data needed for first part of the section
          const restaurant = {
               name: 'Classico Italiano',
               starterMenu: ['Focaccia', 'Bruschetta', 'Garlic Bread', 'Caprese Salad'],
               mainMenu: ['Pizza', 'Pasta', 'Risotto'],    
          };

          const newMenu = [...restaurant.mainMenu, 'Butter nan', 'paneer butter masala'];
          console.log(newMenu);

          // copy array
          const mainMenuCopy = [...restaurant.mainMenu]; 
          // const menu = [...mainMenuCopy, ...restaurant.starterMenu];
          // or
          const menu = mainMenuCopy.concat(restaurant.starterMenu);

          menu.push('Extra masala');
          console.log(mainMenuCopy);
          console.log(restaurant.starterMenu);
          console.log(menu);

          // iterables: arrays, maps, strings, sets, NOT objects

          // console.log(`${...menu} is menu`);   // ... won't work with template literal

          // copy of object, shallow copy
          const newRestaurant = {founded:1998, ...restaurant};
          newRestaurant.name = 'Its new restaurant';
          console.log(newRestaurant.name);
          console.log(restaurant.name);

          newRestaurant.mainMenu.push('new restaurant Item Bread');     // affects both new & old object
          console.log(newRestaurant.mainMenu);
          console.log(restaurant.mainMenu);

     - rest parameter:
          - rest parameter is same as spread operator (...)
          - rest used on left hand side of =, where we give/ put variables names
          - spread used on right hand side of =, where we give values or initialize the variables
          eg.
          const restaurant = {
               name: 'Classico Italiano',
               location: 'Via Angelo Tavanti 23, Firenze, Italy',
               categories: ['Italian', 'Pizzeria', 'Vegetarian', 'Organic'],
               starterMenu: ['Focaccia', 'Bruschetta', 'Garlic Bread', 'Caprese Salad'],
               mainMenu: ['Pizza', 'Pasta', 'Risotto'],

               openingHours: {
               thu: {
                    open: 12,
                    close: 22,
               },
               fri: {
                    open: 11,
                    close: 23,
               },
               sat: {
                    open: 0, // Open 24 hours
                    close: 24,
               },
               mon:{
                    open: 0,
                    close: 45,  // random
               }
               },

               orderPizza: function(main, ...rest){
               console.log(main);
               console.log(rest);
               }
          };

          const arr = [10, 2, 30, 89, 7, 56];
          // there will be only one rest variable, must be at end of array
          const [a, b, ...remaining] = arr;
          console.log(a, b, remaining);

          const [Pizza, , resotto, ...otherFoods] = [...restaurant.mainMenu, ...restaurant.starterMenu];
          console.log(Pizza, resotto, otherFoods);

          const {sat, ...weekdays} = restaurant.openingHours;
          console.log(sat, weekdays);

          const add = function(...nums){
          let s=0;
          for(let i=0; i<nums.length; i++)
               s += nums[i];
          return s;
          }

          console.log(add(1,2));
          console.log(add(1,2,3,4));
          console.log(add(1,2,5,6,7,8));

          const x = [23,5, 6,7,78];
          console.log(add(...x));

          restaurant.orderPizza('my Main');
          restaurant.orderPizza('my Main', 'second Item');

     - short circuiting (&&, ||):
          // || OR
          // returns the first truthy value or if all false return the last value even if its false
          console.log(2 || 'vivek')       // 2
          console.log(true || 0);      // true
          console.log(false || 0);   // 0
          console.log(false || 0 || null);   // null
          console.log(false || 0 || null || undefined);   // undefined
          console.log(false || 'viv' || 'wer' || 'asdf');        // 'viv'
          console.log(0 || undefined || null || '' || "" || -0 || NaN || 'rwe');       // rwe

          const restaurant = {
          guest: 45,
          customers: 0,
          orderPizza: function(){
               console.log('ordering pizza');
          },
          };

          console.log("guest ", restaurant.guest ? restaurant.guest : 10);
          // instead of above
          console.log("people ", restaurant.people || 10);

          // with actual value 0, it should print 0, its not working
          console.log("guest customers", restaurant.customers ? restaurant.customers : 10);
          console.log("people customers", restaurant.customers || 10);


          // AND &&
          // returns first falsy value or if all are true then returns the last value even if its true
          console.log(2 && 'vivek')       // vivek
          console.log(true && 0);      // 0
          console.log(false && 0);   // false
          console.log(false && 0 && null);   // false
          console.log(false && 0 && null && undefined);   // false
          console.log(false && 'viv' && 'wer' && 'asdf');        // 'false'
          console.log(0 && undefined && null && '' && "" && -0 && NaN && 'rwe');       // 0
          console.log(-0 && undefined && null && '' && "" && 0 && NaN && 'rwe');       // -0
          console.log('asdf' && true && 34 && undefined && null && '' && "" && 0 && NaN && 'rwe');       // undefined


          // calling the function if they are exist
          if(restaurant.orderKajuMasala)
          restaurant.orderKajuMasala();
          // instead of above
          restaurant.orderKajuMasala && restaurant.orderKajuMasala();
          restaurant.orderPizza && restaurant.orderPizza();

     - Nullish Coalescing Operator (??):
          const restaurant = {
               guest: 45,
               customers: 0,
               customers2: -0,
               orderPizza: function(){
                    console.log('ordering pizza');
               },
          };

          console.log("guest ", restaurant.guest ? restaurant.guest : 10);    // 45
          // instead of above ?: (ternary operator)
          console.log("people ", restaurant.people || 10);            // 10

          // with actual value 0, it should print 0, its not working
          console.log("guest customers", restaurant.customers ? restaurant.customers : 10);   // 10, but expected 0
          console.log("people customers", restaurant.customers || 10);              //10, here also, expected is 0

          // instead of || (OR) and ?: (ternary) operator Use Nullish coalescing operator ??
          // 0 and '' (empty string) are truthy values for ??
          console.log("guest ", restaurant.guest ?? 110);           // 45
          console.log("people ", restaurant.people ?? 420);          // 420
          console.log("customers ", restaurant.customers2 ?? 10);    // -0

     - Logical Assignment operator:
          const restaurant = {
               guest: 45,
               customers: 0,
               customers2: -0,
               customers3: false,
               orderPizza: function(){
                    console.log('ordering pizza');
               },
               owner: 'Vivek',
          };
          console.log(restaurant);
          // restaurant.guest = restaurant.guest || 10;
          // restaurant.customers = restaurant.customers || 420;
          restaurant.guest ||= 10;
          restaurant.customers ||= 420;         // expected 0 but getting 420
          restaurant.customers3 ||= 90;         // expected false, getting 90
          console.log(restaurant);

          restaurant.customers3 = false;
          // nullish coalescing operator ??, if value exist then prioritize the value else chooses default values
          // restaurant.customers2 = restaurant.customers2 ?? 300;     // -0
          restaurant.customers2 ??= 300;     // -0
          restaurant.customers3 ??= 455;     // false

          console.log("before ", {...restaurant})
          restaurant.owner = restaurant.owner && 'Making it anonymous'
          // instead
          restaurant.owner2  &&= 'Dangerous'
          console.log("After ", {...restaurant})

     - TEST:
          const game = {
               team1: 'Bayern Munich',
               team2: 'Borrussia Dortmund',
               players: [
               [
                    'Neuer',
                    'Pavard',
                    'Martinez',
                    'Alaba',
                    'Davies',
                    'Kimmich',
                    'Goretzka',
                    'Coman',
                    'Muller',
                    'Gnarby',
                    'Lewandowski',
               ],
               [
                    'Burki',
                    'Schulz',
                    'Hummels',
                    'Akanji',
                    'Hakimi',
                    'Weigl',
                    'Witsel',
                    'Hazard',
                    'Brandt',
                    'Sancho',
                    'Gotze',
               ],
               ],
               score: '4:0',
               scored: ['Lewandowski', 'Gnarby', 'Lewandowski', 'Hummels'],
               date: 'Nov 9th, 2037',
               odds: {
               team1: 1.33,
               x: 3.25,
               team2: 6.5,
               },
          };

          // 1.
          const [players1, players2] = game.players;
          console.log(players1, players2);

          // 2.
          const [goalKep1, ...fieldPlayers1] = players1;
          const [goalKep2, ...fieldPlayers2] = players2;
          console.log(goalKep1, goalKep2, fieldPlayers1, fieldPlayers2);

          // 3.
          // const allPlayers = [...players1, ...players2];
          const allPlayers = players1.concat(players2);
          console.log(allPlayers);

          // 4.
          const playersFinal = [...players1, 'Thiago', 'Coutinho', 'perisic'];
          console.log(playersFinal);

          // 5.
          // const {team1, team2, x: draw} = game.odds
          const {odds: {team1, team2, x: draw}} = game;

          console.log(team1, team2, draw);

          // 6.
          const printGoals = (...playerNames) => {
          let n = playerNames.length;
          for(let i=0; i<n; i++)
          console.log(playerNames[i], n);
          }

          printGoals(...players1);
          printGoals('davies', 'muller','love','kim');
          printGoals(...game.scored);

          // 7. team with lower odds wins

          console.log("team1 won? ", team1 < team2 || false);
          // or
          team1 < team2 && console.log("Team1 Won the match");
          team2 < team1 && console.log("Team2 Won the match");

     - for:
          const game = {
               players: [
               [
                    'Neuer',
                    'Pavard',
                    'Martinez',
                    'Alaba',
                    'Davies',
                    'Kimmich',
                    'Goretzka',
                    'Coman',
                    'Muller',
                    'Gnarby',
                    'Lewandowski',
               ],
               [
                    'Burki',
                    'Schulz',
                    'Hummels',
                    'Akanji',
                    'Hakimi',
                    'Weigl',
                    'Witsel',
                    'Hazard',
                    'Brandt',
                    'Sancho',
                    'Gotze',
               ],
               ],
          };

          // for-of loop
          const allPlayers = [...game.players[0], ...game.players[1]]
          console.log(allPlayers);

          for(const item of allPlayers)
          console.log(item);

          // with indexes
          console.log(...allPlayers.entries());
          console.log('....................')
          for(const item of allPlayers.entries())
          console.log(item);

          for(const item of allPlayers.entries())
          console.log(`${item[0]+1}: ${item[1]}`);

          for(const [i, item] of allPlayers.entries())
          console.log(`${i+1}: ${item}`);

          console.log('forEach loop: ')
          allPlayers.forEach((ele, indx)=>{
               console.log(ele, indx);
          })

     - Enhanced Object literals:
          const days = ['mon', 'tues', 'wed', 'sun', 'thu', 'fri', 'sat'];

          const openingHours = {
               // computing property names, always use [] inside that put dynamic name else throws error
               [days[1]]:{
                    open: 45,
                    close: 45,
               },
               [days[0]]:{
                    open: 45,
                    close: 45,
               },
               [`day-${6+12}`]: {
                    open: 45,
                    close: 45,
               },
               thu: {
                    open: 12,
                    close: 22,
               },
               fri: {
                    open: 11,
                    close: 23,
               },
               sat: {
                    open: 0, // Open 24 hours
                    close: 24,
               },
          };

          const newObje = {
               id:1,
               value:'string',
          }

          const restaurant = {
               name: 'Classico Italiano',
               location: 'Via Angelo Tavanti 23, Firenze, Italy',
               categories: ['Italian', 'Pizzeria', 'Vegetarian', 'Organic'],
               starterMenu: ['Focaccia', 'Bruschetta', 'Garlic Bread', 'Caprese Salad'],
               mainMenu: ['Pizza', 'Pasta', 'Risotto'],
               // openingHours: openingHours,       // as it has same name so just mention once
               openingHours,
               // adding other newObje
               newObje,
               
               // old way of func in object
               orderPizaa1: function(){
                    console.log('ordering pizza1..');
                    return 1;
               },
               // new way func in object, without key name
               orderPizaa2(){
                    console.log('Ordering Pizza2');
                    return 1;
               },
               orderPizaa3(n1, n2){
                    console.log(`first ${n1}, second ${n2}`);
                    return 1;      // just to make sure the method does exist
               },
          };
          console.log(restaurant);
          restaurant.orderPizaa1();
          restaurant.orderPizaa2();
          console.log(restaurant);
          restaurant.orderPizaa1();
          restaurant.orderPizaa2();

     - Optional chaining (.?):
          console.log(restaurant.openingHours.mon);

          if(restaurant.openingHours.wed)
               console.log('Opens at ', restaurant.openingHours.wed.open);

          // instead
          console.log(restaurant.openingHours.wed?.open ?? 'Closed on wednesday');

          if(restaurant.openingHours.mon)
               console.log('on Monday Opens at ', restaurant.openingHours.mon.open);

          console.log(restaurant.openingHours.sun?.open ?? 'Closed on sunday');

          // if restaurant object exist, then if openingHours exist then on sunday exist then show open value
          // optional chaining
          console.log(restaurant?.openingHours?.sun?.open ?? 'Closed on sunday');

          days.forEach((day) =>{
               const status = restaurant.openingHours?.[day] ? `on ${day} the restaurant opens at ${restaurant.openingHours[day].open}` : `The restaurant is closed on ${day}`
               console.log(status);
          })

          restaurant.orderPizaa1() ?? 'orderPizaa1 method doesn\'t exist';
          restaurant.orderPizaa3?.(45,89) ?? 'orderPizaa3 method doesn\'t exist';
          restaurant.orderPizaa4?.(1,2) ?? 'orderPizaa4 method doesn\'t exist'

          const users = [
                         {
                              userName: 'Vivek',
                              email: 'viv@v.com',
                         },
                         {
                              userName: 'mahesh',
                              age: 45,
                         },
                    ];
          console.log(users[0].userName)
          console.log(users[0]?.age ?? 'Age doesn\'t exist');
          console.log(users[1]?.age ?? 'Age doesn\'t exist');

     - Looping Objects: keys, values, entries
          // all keys of object
          console.log(Object.keys(restaurant));

          // all values of object
          console.log(Object.values(restaurant));

          // all data of object
          console.log(Object.entries(restaurant));

          // printing keys of object
          for(const k of Object.keys(restaurant))
               console.log(k);

          // printing values of object
          for(const v of Object.values(restaurant))
               console.log(v);

          // printing both keys & values of object
          for(const [k, v] of Object.entries(restaurant))
               console.log(k, v);

     - Test:
          // 1.
          for(const [indx, ele] of game.scored.entries())
               console.log(`${indx+1}: ${ele}`);

          // 2. average odd
          let avg = 0;
          for(const val of Object.values(game.odds))
               avg += val;

          console.log(avg / Object.values(game.odds).length)

          for(const [keys, values] of Object.entries(game.odds))
               console.log(`Odd of ${keys === 'x' ? 'draw' : `victory ${game[keys]}`}: ${values}`)

          const scorers = {};

          for(const ele of game.scored)
               // scorers[ele] = (scorers[ele] || 0) + 1;
               scorers[ele] = (scorers[ele] ?? 0) + 1;
               // scorers[ele] = (scorers?.[ele] ?? 0) + 1;
          console.log(scorers);

     - Sets:
          - doesn't contain duplicates
          const orderSet = new Set([5,4,3,2,1,5,4,3,2,1]);
          console.log(orderSet)

          console.log(new Set('vivek'));
          console.log(orderSet.size);
          console.log(orderSet.has(3));
          console.log(orderSet.has(1));
          console.log(orderSet.has(30))

          orderSet.add(12);
          orderSet.add('nikate');
          orderSet.add('vivek');
          console.log(orderSet);

          console.log('5 exist in orderSet? ', orderSet.has(5));
          orderSet.delete(5);
          console.log('5 exist in orderSet? ', orderSet.has(5));

          console.log('vivek exist in orderSet? ', orderSet.has('vivek'));
          orderSet.delete('vivek');
          console.log('vivek exist in orderSet? ', orderSet.has('vivek'));

          // traversing
          for(const item of orderSet)
          console.log(item);

          // clearing set
          orderSet.clear();
          console.log(orderSet);

          const staff = [1,2,3,4,5,6,7,1,2,3,4,5,6,7];
          const staffSet = new Set(staff);
          console.log(staffSet);

          const uniqStaffMem = [...staffSet];
          console.log(uniqStaffMem);

          const set1 = new Set([4,5,6,7,8,9]);
          const set2 = new Set([1,2,3,4,5]);
          const common = set1.intersection(set2)
          console.log(common);
          console.log(...common);      // array

          // all elements without duplicates
          const all = set1.union(set2);
          console.log(all);

          // unique in set1
          const uniqSet1 = set1.difference(set2);
          const uniqSet2 = set2.difference(set1);

          console.log(uniqSet1); // 4,5 are repeated so excluded them.
          console.log(uniqSet2); // 4,5 are repeated so excluded them.

          // uniq foods from both set, excluding common
          const allUniq1 = set1.symmetricDifference(set2);
          const allUniq2 = set2.symmetricDifference(set1);
          console.log(allUniq1, allUniq2);

          // isDisjointFrom return true if both sets doesn't have any common elements
          console.log(set1.isDisjointFrom(set2));     // false
          console.log((new Set([4,5,6])).isDisjointFrom(new Set([1,2,3])));      // true

          console.log((new Set([1,2,3,4])).isSubsetOf(new Set([1,2])));      // false
          console.log((new Set([1,2])).isSubsetOf(new Set([1,2,3,4])));      // true

          console.log((new Set([1,2,3,4])).isSupersetOf(new Set([1,2])));      // true
          console.log((new Set([1,2])).isSupersetOf(new Set([1,2,3,4])));      // false

     - Map:
          


          
==============================================================================================================================
==============================================================================================================================
==============================================================================================================================
==============================================================================================================================
==============================================================================================================================
==============================================================================================================================
==============================================================================================================================
==============================================================================================================================
==============================================================================================================================
==============================================================================================================================
==============================================================================================================================
